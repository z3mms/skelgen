#!/usr/bin/perl
# PERL SKELETON GENERATOR - BY TZ
use strict;
use warnings;
use Getopt::Long;

my $filename = "skel.pl";

GetOptions(
	"f=s" => \$filename,
);

sub printskel {
	print MYSKEL <<SKEL;
#!/usr/bin/perl
# Perl Skeleton generated by skelgen.pl
# by XXXX
#
# Changelog
# 1.0 - Initial version

use strict;
use warnings;
use Getopt::Long;
use File::Basename;

my \$basename = basename(\$0);

# usage information 
sub show_help {
	print <<HELP;
FILE PROCESSOR - by XX

Usage: ./\$basename -f <file name>

Example: ./\$basename -f blah.txt
	
Options:
	-f	Path to file
	
HELP
	exit 1;
}

# declare variables
my \$file = "";
my \$help = 0;

GetOptions(
	"f=s" => \\\$file,
	'h'	  => \\\$help,
) or show_help;

\$help and show_help;

start();

# before filter
sub start {
	open (FILE, \$file) or die "Cannot open ".\$file.": ".\$!;
	search();
	close (FILE);
}

######################################################
# SAUCE AND KETCUP
# this function reads line by line and match the regex
######################################################
sub search {
	while(<FILE>) {
	
		# create your own regex here
		if (\/(.+)\/) {

			print \$1 . "\\n";
		}
	}
}
SKEL
}

open (MYSKEL, '>'.$filename);
print "Creating file....\n";
printskel();
print "Changing permission...\n";
system ("chmod 700 ".$filename);
system ("chmod +x ".$filename);
print "Starting vim....\n";
system ("vim ".$filename);
close (MYSKEL);
